plugins {
    id 'org.asciidoctor.jvm.pdf'
    id 'org.asciidoctor.jvm.convert'
    id 'org.asciidoctor.jvm.gems' version '4.0.2'
    id 'ch.nomisp.confluence.publisher' version '0.5.0'
}

repositories {
    ruby {
        gems()
    }
    jcenter()
}

dependencies {
    //    //asciidoctorGems 'rubygems:rouge:4.2.0'
    asciidoctorGems 'rubygems:asciidoctor-diagram:2.3.0'
    asciidoctorGems 'rubygems:asciidoctor-multipage:0.0.18'
    asciidoctorGems 'rubygems:asciidoctor-diagram-plantuml:1.2024.3'
    asciidoctorGems 'rubygems:asciidoctor-diagram-batik:1.17'
}

asciidoctor {

    baseDirFollowsSourceFile()
    dependsOn asciidoctorGemsPrepare
    sourceDir '.'

    if (project.hasProperty('docDir')) {
        // Include only a single directory if 'docDir' is passed
        sources {
            include project.docDir+'/*.adoc'
            exclude '*/fragments/**'
            exclude 'fragments/**'
            exclude '**/_*'
        }
    } else {
        // Include all files in the default or provided directory
        sources {
            include 'architecture/**/*.adoc'
            include 'business/**/*.adoc'
            include 'cr/**/*.adoc'
            exclude '*/fragments/**'
            exclude 'fragments/**'
            exclude '**/_*'
        }
    }

    outputOptions {
        backends = ['docbook', 'html5']
        //backends 'multipage_html5'
    }
    asciidoctorj {
        modules {
            diagram {
                version '2.3.0'
            }
        }
        //requires 'asciidoctor-multipage'
        attributes 'multipage-level': 2
        attributes 'plantumlconfig': file("${rootDir}/theme/plantuml.cfg")
        attributes 'plantuml-dir': file("${rootDir}/diagrams")
        attributes stylesheet: "${rootDir}/theme/main.css"
    }
}



asciidoctorPdf {
    jvm {
        // Fix issue with JDK16+
        jvmArgs("--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens", "java.base/java.io=ALL-UNNAMED")
    }
    dependsOn asciidoctorGemsPrepare
    theme 'main'
    baseDirFollowsSourceFile()
    sourceDir '.'

    if (project.hasProperty('docDir')) {
        // Include only a single directory if 'docDir' is passed
        sources {
            include project.docDir+'/*.adoc'
            exclude '*/fragments/**'
            exclude 'fragments/**'
            exclude '**/_*'
        }
    } else {
        // Include all files in the default or provided directory
        sources {
            include 'architecture/**/*.adoc'
            include 'business/**/*.adoc'
            include 'cr/**/*.adoc'
            exclude '*/fragments/**'
            exclude 'fragments/**'
            exclude '**/_*'
        }
    }

    pdfThemes {
        local 'main', {
            themeDir = file("../theme")
            themeName = 'main'
        }
    }
    asciidoctorj {
        modules {
            diagram {
                version '2.3.0'
            }
        }
        requires 'rouge'
        attributes 'build-gradle': file('build.gradle'),
                'plantumlconfig': file("${rootDir}/theme/plantuml.cfg"),
                'source-highlighter': 'rouge',
                'icons': 'font',
                'idprefix': '',
                'idseparator': '-',
                'plantuml-dir': file("${rootDir}/diagrams")
    }
}

def registerCopyTasks(String dirName) {
    tasks.register("copyAssetsHtml5From${dirName.capitalize()}", Copy) {
        from(dirName) {
            include '**/images/**'
            exclude '**/fragments/**', 'build/**'
        }
        into(layout.buildDirectory.dir("/docs/asciidoc/html5/${dirName}"))
        includeEmptyDirs = false
    }

    tasks.register("copyAssetsDocbookFrom${dirName.capitalize()}", Copy) {
        from(dirName) {
            include '**/images/**'
            exclude '**/fragmenty/**', 'build/**'
        }
        into(layout.buildDirectory.dir("/docs/asciidoc/docbook/${dirName}"))
        includeEmptyDirs = false
    }
}

// Register copy tasks for each source directory
['architecture', 'cr', 'business'].each { dirName ->
    registerCopyTasks(dirName)
}

// Aggregate task to call all copy tasks
tasks.register('copyImages') {
    dependsOn tasks.withType(Copy)
}

tasks.named('asciidoctor') {
    finalizedBy(tasks.named('copyImages'))
}

confluencePublisher {
    asciiDocRootFolder = file("./business")
    outputDir = "${buildDir}/docs/confluence"
    rootConfluenceUrl = "$confluenceUrl"
    spaceKey = '~11111111111111111111111111111111111'
    ancestorId = '1111111111'
    username = "$confluenceUser"
    password = "$confluenceApiKey"
    notifyWatchers = false
}