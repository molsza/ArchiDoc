/*
	Sourced: https://gist.github.com/rich-biker/9a3c86c5a576ce0d8639856f3ee81651

	Script: Documentation Generation to AsciiDoc
	Purpose: To generate output based on a driving view
    Author: Richard Heward - Tame Blue Lion Ltd
    Modifed by: Michal Olsza  export to .adoc

    Props:
    pdfwidth - use to fix the width of the diagram in the pdf output. The value is in percentage of the page width. If not set will be calculated based on the diagram width.

	This generates a asciidoc files with the embedded images and text based upon a driving view in Archi of groups that trigger each other and embedded views.
 */


// Get current date
var currentDate = new Date().toLocaleString("en-US", {
    day: 'numeric',
    month: 'short',
    year: 'numeric'
});


var natSort=function(as, bs) {
    var a, b, a1, b1,
    rx=  /(\d+)|(\D+)/g, rd= /\d/, rz=/^0/;
    if(typeof as=='number' || typeof bs=='number'){
        if(isNaN(as))return 1;
        if(isNaN(bs))return -1;
        return as-bs;
    }
    a= String(as).toLowerCase();
    b= String(bs).toLowerCase();
    if(a=== b) return 0;
    if(!(rd.test(a) && rd.test(b))) return a> b? 1: -1;
    a= a.match(rx);
    b= b.match(rx);
    while(a.length && b.length){
        a1= a.shift();
        b1= b.shift();
        if(a1!== b1){
            if(rd.test(a1) && rd.test(b1)){
                return a1.replace(rz,'.0')- b1.replace(rz,'.0');
            }
            else return a1> b1? 1: -1;
        }
    }
    return a.length - b.length;
}


var diacriticsMap = {
'\u0041': 'A','\u24B6': 'A','\uFF21': 'A','\u00C0': 'A','\u00C1': 'A','\u00C2': 'A','\u1EA6': 'A','\u1EA4': 'A','\u1EAA': 'A','\u1EA8': 'A',
'\u00C3': 'A','\u0100': 'A','\u0102': 'A','\u1EB0': 'A','\u1EAE': 'A','\u1EB4': 'A','\u1EB2': 'A','\u0226': 'A','\u01E0': 'A','\u00C4': 'A',
'\u01DE': 'A','\u1EA2': 'A','\u00C5': 'A','\u01FA': 'A','\u01CD': 'A','\u0200': 'A','\u0202': 'A','\u1EA0': 'A','\u1EAC': 'A','\u1EB6': 'A',
'\u1E00': 'A','\u0104': 'A','\u023A': 'A','\u2C6F': 'A',

'\uA732': 'AA',
'\u00C6': 'AE','\u01FC': 'AE','\u01E2': 'AE',
'\uA734': 'AO',
'\uA736': 'AU',
'\uA738': 'AV','\uA73A': 'AV',
'\uA73C': 'AY',
'\u0042': 'B','\u24B7': 'B','\uFF22': 'B','\u1E02': 'B','\u1E04': 'B','\u1E06': 'B','\u0243': 'B','\u0182': 'B','\u0181': 'B',

'\u0043': 'C','\u24B8': 'C','\uFF23': 'C','\u0106': 'C','\u0108': 'C','\u010A': 'C','\u010C': 'C','\u00C7': 'C','\u1E08': 'C','\u0187': 'C',
'\u023B': 'C','\uA73E': 'C',

'\u0044': 'D','\u24B9': 'D','\uFF24': 'D','\u1E0A': 'D','\u010E': 'D','\u1E0C': 'D','\u1E10': 'D','\u1E12': 'D','\u1E0E': 'D','\u0110': 'D',
'\u018B': 'D','\u018A': 'D','\u0189': 'D','\uA779': 'D',

'\u01F1': 'DZ','\u01C4': 'DZ',
'\u01F2': 'Dz','\u01C5': 'Dz',

'\u0045': 'E','\u24BA': 'E','\uFF25': 'E','\u00C8': 'E','\u00C9': 'E','\u00CA': 'E','\u1EC0': 'E','\u1EBE': 'E','\u1EC4': 'E','\u1EC2': 'E',
'\u1EBC': 'E','\u0112': 'E','\u1E14': 'E','\u1E16': 'E','\u0114': 'E','\u0116': 'E','\u00CB': 'E','\u1EBA': 'E','\u011A': 'E','\u0204': 'E',
'\u0206': 'E','\u1EB8': 'E','\u1EC6': 'E','\u0228': 'E','\u1E1C': 'E','\u0118': 'E','\u1E18': 'E','\u1E1A': 'E','\u0190': 'E','\u018E': 'E',

'\u0046': 'F','\u24BB': 'F','\uFF26': 'F','\u1E1E': 'F','\u0191': 'F','\uA77B': 'F',

'\u0047': 'G','\u24BC': 'G','\uFF27': 'G','\u01F4': 'G','\u011C': 'G','\u1E20': 'G','\u011E': 'G','\u0120': 'G','\u01E6': 'G','\u0122': 'G',
'\u01E4': 'G','\u0193': 'G','\uA7A0': 'G','\uA77D': 'G','\uA77E': 'G',

'\u0048': 'H','\u24BD': 'H','\uFF28': 'H','\u0124': 'H','\u1E22': 'H','\u1E26': 'H','\u021E': 'H','\u1E24': 'H','\u1E28': 'H','\u1E2A': 'H',
'\u0126': 'H','\u2C67': 'H','\u2C75': 'H','\uA78D': 'H',

'\u0049': 'I','\u24BE': 'I','\uFF29': 'I','\u00CC': 'I','\u00CD': 'I','\u00CE': 'I','\u0128': 'I','\u012A': 'I','\u012C': 'I','\u0130': 'I',
'\u00CF': 'I','\u1E2E': 'I','\u1EC8': 'I','\u01CF': 'I','\u0208': 'I','\u020A': 'I','\u1ECA': 'I','\u012E': 'I','\u1E2C': 'I','\u0197': 'I',

'\u004A': 'J','\u24BF': 'J','\uFF2A': 'J','\u0134': 'J','\u0248': 'J',

'\u004B': 'K','\u24C0': 'K','\uFF2B': 'K','\u1E30': 'K','\u01E8': 'K','\u1E32': 'K','\u0136': 'K','\u1E34': 'K','\u0198': 'K','\u2C69': 'K',
'\uA740': 'K','\uA742': 'K','\uA744': 'K','\uA7A2': 'K',

'\u004C': 'L','\u24C1': 'L','\uFF2C': 'L','\u013F': 'L','\u0139': 'L','\u013D': 'L','\u1E36': 'L','\u1E38': 'L','\u013B': 'L','\u1E3C': 'L',
'\u1E3A': 'L','\u0141': 'L','\u023D': 'L','\u2C62': 'L','\u2C60': 'L','\uA748': 'L','\uA746': 'L','\uA780': 'L',

'\u01C7': 'LJ',
'\u01C8': 'Lj',
'\u004D': 'M','\u24C2': 'M','\uFF2D': 'M','\u1E3E': 'M','\u1E40': 'M','\u1E42': 'M','\u2C6E': 'M','\u019C': 'M',

'\u004E': 'N','\u24C3': 'N','\uFF2E': 'N','\u01F8': 'N','\u0143': 'N','\u00D1': 'N','\u1E44': 'N','\u0147': 'N','\u1E46': 'N','\u0145': 'N',
'\u1E4A': 'N','\u1E48': 'N','\u0220': 'N','\u019D': 'N','\uA790': 'N','\uA7A4': 'N',

'\u01CA': 'NJ',
'\u01CB': 'Nj',

'\u004F': 'O','\u24C4': 'O','\uFF2F': 'O','\u00D2': 'O','\u00D3': 'O','\u00D4': 'O','\u1ED2': 'O','\u1ED0': 'O','\u1ED6': 'O','\u1ED4': 'O',
'\u00D5': 'O','\u1E4C': 'O','\u022C': 'O','\u1E4E': 'O','\u014C': 'O','\u1E50': 'O','\u1E52': 'O','\u014E': 'O','\u022E': 'O','\u0230': 'O',
'\u00D6': 'O','\u022A': 'O','\u1ECE': 'O','\u0150': 'O','\u01D1': 'O','\u020C': 'O','\u020E': 'O','\u01A0': 'O','\u1EDC': 'O','\u1EDA': 'O',
'\u1EE0': 'O','\u1EDE': 'O','\u1EE2': 'O','\u1ECC': 'O','\u1ED8': 'O','\u01EA': 'O','\u01EC': 'O','\u00D8': 'O','\u01FE': 'O','\u0186': 'O',
'\u019F': 'O','\uA74A': 'O','\uA74C': 'O',

'\u01A2': 'OI',
'\uA74E': 'OO',
'\u0222': 'OU',
'\u0050': 'P','\u24C5': 'P','\uFF30': 'P','\u1E54': 'P','\u1E56': 'P','\u01A4': 'P','\u2C63': 'P','\uA750': 'P','\uA752': 'P','\uA754': 'P',
'\u0051': 'Q','\u24C6': 'Q','\uFF31': 'Q','\uA756': 'Q','\uA758': 'Q','\u024A': 'Q',

'\u0052': 'R','\u24C7': 'R','\uFF32': 'R','\u0154': 'R','\u1E58': 'R','\u0158': 'R','\u0210': 'R','\u0212': 'R','\u1E5A': 'R','\u1E5C': 'R',
'\u0156': 'R','\u1E5E': 'R','\u024C': 'R','\u2C64': 'R','\uA75A': 'R','\uA7A6': 'R','\uA782': 'R',

'\u0053': 'S','\u24C8': 'S','\uFF33': 'S','\u1E9E': 'S','\u015A': 'S','\u1E64': 'S','\u015C': 'S','\u1E60': 'S','\u0160': 'S','\u1E66': 'S',
'\u1E62': 'S','\u1E68': 'S','\u0218': 'S','\u015E': 'S','\u2C7E': 'S','\uA7A8': 'S','\uA784': 'S',

'\u0054': 'T','\u24C9': 'T','\uFF34': 'T','\u1E6A': 'T','\u0164': 'T','\u1E6C': 'T','\u021A': 'T','\u0162': 'T','\u1E70': 'T','\u1E6E': 'T',
'\u0166': 'T','\u01AC': 'T','\u01AE': 'T','\u023E': 'T','\uA786': 'T',

'\uA728': 'TZ',

'\u0055': 'U','\u24CA': 'U','\uFF35': 'U','\u00D9': 'U','\u00DA': 'U','\u00DB': 'U','\u0168': 'U','\u1E78': 'U','\u016A': 'U','\u1E7A': 'U',
'\u016C': 'U','\u00DC': 'U','\u01DB': 'U','\u01D7': 'U','\u01D5': 'U','\u01D9': 'U','\u1EE6': 'U','\u016E': 'U','\u0170': 'U','\u01D3': 'U',
'\u0214': 'U','\u0216': 'U','\u01AF': 'U','\u1EEA': 'U','\u1EE8': 'U','\u1EEE': 'U','\u1EEC': 'U','\u1EF0': 'U','\u1EE4': 'U','\u1E72': 'U',
'\u0172': 'U','\u1E76': 'U','\u1E74': 'U','\u0244': 'U',

'\u0056': 'V','\u24CB': 'V','\uFF36': 'V','\u1E7C': 'V','\u1E7E': 'V','\u01B2': 'V','\uA75E': 'V','\u0245': 'V',
'\uA760': 'VY',
'\u0057': 'W','\u24CC': 'W','\uFF37': 'W','\u1E80': 'W','\u1E82': 'W','\u0174': 'W','\u1E86': 'W','\u1E84': 'W','\u1E88': 'W','\u2C72': 'W',
'\u0058': 'X','\u24CD': 'X','\uFF38': 'X','\u1E8A': 'X','\u1E8C': 'X',

'\u0059': 'Y','\u24CE': 'Y','\uFF39': 'Y','\u1EF2': 'Y','\u00DD': 'Y','\u0176': 'Y','\u1EF8': 'Y','\u0232': 'Y','\u1E8E': 'Y','\u0178': 'Y',
'\u1EF6': 'Y','\u1EF4': 'Y','\u01B3': 'Y','\u024E': 'Y','\u1EFE': 'Y',

'\u005A': 'Z','\u24CF': 'Z','\uFF3A': 'Z','\u0179': 'Z','\u1E90': 'Z','\u017B': 'Z','\u017D': 'Z','\u1E92': 'Z','\u1E94': 'Z','\u01B5': 'Z',
'\u0224': 'Z','\u2C7F': 'Z','\u2C6B': 'Z','\uA762': 'Z',

'\u0061': 'a','\u24D0': 'a','\uFF41': 'a','\u1E9A': 'a','\u00E0': 'a','\u00E1': 'a','\u00E2': 'a','\u1EA7': 'a','\u1EA5': 'a','\u1EAB': 'a',
'\u1EA9': 'a','\u00E3': 'a','\u0101': 'a','\u0103': 'a','\u1EB1': 'a','\u1EAF': 'a','\u1EB5': 'a','\u1EB3': 'a','\u0227': 'a','\u01E1': 'a',
'\u00E4': 'a','\u01DF': 'a','\u1EA3': 'a','\u00E5': 'a','\u01FB': 'a','\u01CE': 'a','\u0201': 'a','\u0203': 'a','\u1EA1': 'a','\u1EAD': 'a',
'\u1EB7': 'a','\u1E01': 'a','\u0105': 'a','\u2C65': 'a','\u0250': 'a',

'\uA733': 'aa',
'\u00E6': 'ae','\u01FD': 'ae','\u01E3': 'ae',
'\uA735': 'ao',
'\uA737': 'au',
'\uA739': 'av','\uA73B': 'av',
'\uA73D': 'ay',
'\u0062': 'b','\u24D1': 'b','\uFF42': 'b','\u1E03': 'b','\u1E05': 'b','\u1E07': 'b','\u0180': 'b','\u0183': 'b','\u0253': 'b',

'\u0063': 'c','\u24D2': 'c','\uFF43': 'c','\u0107': 'c','\u0109': 'c','\u010B': 'c','\u010D': 'c','\u00E7': 'c','\u1E09': 'c','\u0188': 'c',
'\u023C': 'c','\uA73F': 'c','\u2184': 'c',

'\u0064': 'd','\u24D3': 'd','\uFF44': 'd','\u1E0B': 'd','\u010F': 'd','\u1E0D': 'd','\u1E11': 'd','\u1E13': 'd','\u1E0F': 'd','\u0111': 'd',
'\u018C': 'd','\u0256': 'd','\u0257': 'd','\uA77A': 'd',

'\u01F3': 'dz','\u01C6': 'dz',

'\u0065': 'e','\u24D4': 'e','\uFF45': 'e','\u00E8': 'e','\u00E9': 'e','\u00EA': 'e','\u1EC1': 'e','\u1EBF': 'e','\u1EC5': 'e','\u1EC3': 'e',
'\u1EBD': 'e','\u0113': 'e','\u1E15': 'e','\u1E17': 'e','\u0115': 'e','\u0117': 'e','\u00EB': 'e','\u1EBB': 'e','\u011B': 'e','\u0205': 'e',
'\u0207': 'e','\u1EB9': 'e','\u1EC7': 'e','\u0229': 'e','\u1E1D': 'e','\u0119': 'e','\u1E19': 'e','\u1E1B': 'e','\u0247': 'e','\u025B': 'e',
'\u01DD': 'e',

'\u0066': 'f','\u24D5': 'f','\uFF46': 'f','\u1E1F': 'f','\u0192': 'f','\uA77C': 'f',

'\u0067': 'g','\u24D6': 'g','\uFF47': 'g','\u01F5': 'g','\u011D': 'g','\u1E21': 'g','\u011F': 'g','\u0121': 'g','\u01E7': 'g','\u0123': 'g',
'\u01E5': 'g','\u0260': 'g','\uA7A1': 'g','\u1D79': 'g','\uA77F': 'g',

'\u0068': 'h','\u24D7': 'h','\uFF48': 'h','\u0125': 'h','\u1E23': 'h','\u1E27': 'h','\u021F': 'h','\u1E25': 'h','\u1E29': 'h','\u1E2B': 'h',
'\u1E96': 'h','\u0127': 'h','\u2C68': 'h','\u2C76': 'h','\u0265': 'h',

'\u0195': 'hv',

'\u0069': 'i','\u24D8': 'i','\uFF49': 'i','\u00EC': 'i','\u00ED': 'i','\u00EE': 'i','\u0129': 'i','\u012B': 'i','\u012D': 'i','\u00EF': 'i',
'\u1E2F': 'i','\u1EC9': 'i','\u01D0': 'i','\u0209': 'i','\u020B': 'i','\u1ECB': 'i','\u012F': 'i','\u1E2D': 'i','\u0268': 'i','\u0131': 'i',

'\u006A': 'j','\u24D9': 'j','\uFF4A': 'j','\u0135': 'j','\u01F0': 'j','\u0249': 'j',

'\u006B': 'k','\u24DA': 'k','\uFF4B': 'k','\u1E31': 'k','\u01E9': 'k','\u1E33': 'k','\u0137': 'k','\u1E35': 'k','\u0199': 'k','\u2C6A': 'k',
'\uA741': 'k','\uA743': 'k','\uA745': 'k','\uA7A3': 'k',

'\u006C': 'l','\u24DB': 'l','\uFF4C': 'l','\u0140': 'l','\u013A': 'l','\u013E': 'l','\u1E37': 'l','\u1E39': 'l','\u013C': 'l','\u1E3D': 'l',
'\u1E3B': 'l','\u017F': 'l','\u0142': 'l','\u019A': 'l','\u026B': 'l','\u2C61': 'l','\uA749': 'l','\uA781': 'l','\uA747': 'l',

'\u01C9': 'lj',
'\u006D': 'm','\u24DC': 'm','\uFF4D': 'm','\u1E3F': 'm','\u1E41': 'm','\u1E43': 'm','\u0271': 'm','\u026F': 'm',

'\u006E': 'n','\u24DD': 'n','\uFF4E': 'n','\u01F9': 'n','\u0144': 'n','\u00F1': 'n','\u1E45': 'n','\u0148': 'n','\u1E47': 'n','\u0146': 'n',
'\u1E4B': 'n','\u1E49': 'n','\u019E': 'n','\u0272': 'n','\u0149': 'n','\uA791': 'n','\uA7A5': 'n',

'\u01CC': 'nj',

'\u006F': 'o','\u24DE': 'o','\uFF4F': 'o','\u00F2': 'o','\u00F3': 'o','\u00F4': 'o','\u1ED3': 'o','\u1ED1': 'o','\u1ED7': 'o','\u1ED5': 'o',
'\u00F5': 'o','\u1E4D': 'o','\u022D': 'o','\u1E4F': 'o','\u014D': 'o','\u1E51': 'o','\u1E53': 'o','\u014F': 'o','\u022F': 'o','\u0231': 'o',
'\u00F6': 'o','\u022B': 'o','\u1ECF': 'o','\u0151': 'o','\u01D2': 'o','\u020D': 'o','\u020F': 'o','\u01A1': 'o','\u1EDD': 'o','\u1EDB': 'o',
'\u1EE1': 'o','\u1EDF': 'o','\u1EE3': 'o','\u1ECD': 'o','\u1ED9': 'o','\u01EB': 'o','\u01ED': 'o','\u00F8': 'o','\u01FF': 'o','\u0254': 'o',
'\uA74B': 'o','\uA74D': 'o','\u0275': 'o',

'\u01A3': 'oi',
'\u0223': 'ou',
'\uA74F': 'oo',
'\u0070': 'p','\u24DF': 'p','\uFF50': 'p','\u1E55': 'p','\u1E57': 'p','\u01A5': 'p','\u1D7D': 'p','\uA751': 'p','\uA753': 'p','\uA755': 'p',
'\u0071': 'q','\u24E0': 'q','\uFF51': 'q','\u024B': 'q','\uA757': 'q','\uA759': 'q',

'\u0072': 'r','\u24E1': 'r','\uFF52': 'r','\u0155': 'r','\u1E59': 'r','\u0159': 'r','\u0211': 'r','\u0213': 'r','\u1E5B': 'r','\u1E5D': 'r',
'\u0157': 'r','\u1E5F': 'r','\u024D': 'r','\u027D': 'r','\uA75B': 'r','\uA7A7': 'r','\uA783': 'r',

'\u0073': 's','\u24E2': 's','\uFF53': 's','\u00DF': 's','\u015B': 's','\u1E65': 's','\u015D': 's','\u1E61': 's','\u0161': 's','\u1E67': 's',
'\u1E63': 's','\u1E69': 's','\u0219': 's','\u015F': 's','\u023F': 's','\uA7A9': 's','\uA785': 's','\u1E9B': 's',

'\u0074': 't','\u24E3': 't','\uFF54': 't','\u1E6B': 't','\u1E97': 't','\u0165': 't','\u1E6D': 't','\u021B': 't','\u0163': 't','\u1E71': 't',
'\u1E6F': 't','\u0167': 't','\u01AD': 't','\u0288': 't','\u2C66': 't','\uA787': 't',

'\uA729': 'tz',

'\u0075': 'u','\u24E4': 'u','\uFF55': 'u','\u00F9': 'u','\u00FA': 'u','\u00FB': 'u','\u0169': 'u','\u1E79': 'u','\u016B': 'u','\u1E7B': 'u',
'\u016D': 'u','\u00FC': 'u','\u01DC': 'u','\u01D8': 'u','\u01D6': 'u','\u01DA': 'u','\u1EE7': 'u','\u016F': 'u','\u0171': 'u','\u01D4': 'u',
'\u0215': 'u','\u0217': 'u','\u01B0': 'u','\u1EEB': 'u','\u1EE9': 'u','\u1EEF': 'u','\u1EED': 'u','\u1EF1': 'u','\u1EE5': 'u','\u1E73': 'u',
'\u0173': 'u','\u1E77': 'u','\u1E75': 'u','\u0289': 'u',

'\u0076': 'v','\u24E5': 'v','\uFF56': 'v','\u1E7D': 'v','\u1E7F': 'v','\u028B': 'v','\uA75F': 'v','\u028C': 'v',
'\uA761': 'vy',
'\u0077': 'w','\u24E6': 'w','\uFF57': 'w','\u1E81': 'w','\u1E83': 'w','\u0175': 'w','\u1E87': 'w','\u1E85': 'w','\u1E98': 'w','\u1E89': 'w',
'\u2C73': 'w',
'\u0078': 'x','\u24E7': 'x','\uFF58': 'x','\u1E8B': 'x','\u1E8D': 'x',

'\u0079': 'y','\u24E8': 'y','\uFF59': 'y','\u1EF3': 'y','\u00FD': 'y','\u0177': 'y','\u1EF9': 'y','\u0233': 'y','\u1E8F': 'y','\u00FF': 'y',
'\u1EF7': 'y','\u1E99': 'y','\u1EF5': 'y','\u01B4': 'y','\u024F': 'y','\u1EFF': 'y',

'\u007A': 'z','\u24E9': 'z','\uFF5A': 'z','\u017A': 'z','\u1E91': 'z','\u017C': 'z','\u017E': 'z','\u1E93': 'z','\u1E95': 'z','\u01B6': 'z',
'\u0225': 'z','\u0240': 'z','\u2C6C': 'z','\uA763': 'z',
};

console.show();
console.clear();
console.log("Documentation Generation @", currentDate);

var Verbose = false;
var Sections = [];
var Errors = [];
var nextOne = null;
var outInfo = "";
var theToc = "";
var path = "";
var fileName = "";
var embed = false; // false will store the images outside of the generated markdown; true is embedded inside
var exportAsSVG = true; // false will export as PNG
var hardNewpage = false; // if true, the text NEWPAGE will be put in the output for post processing in MS Word to find and replace for a proper new page.
var listofNewpageheaders = [1, 2, 3]; // these will generate the hardNewpage (if true) for these header levels
var drivingView = null; // will be set to the selected view that has all the groups and view references on.

// Below is a hashtable of settings which define what to include in each section of the document. If not overridden by a group, these settings will apply to the entire document generated from a driving view.
// A property of the same name of the settings below, with a value of true/false, on the driving view or a group, will override this value for anything nested under that section of the document, unless overridden again.
var DefaultInclusionSettings = {
    "Overwrite": true, //if false then the file will not be overwritten if exists
    "CreateChildAdoc": true, // if true will generate a separate adoc file for this group,
    "AddParentSectionNumberToChild": false, // if true will add the parent section number to the child file names
    "FlatThisGroup": false, // if true will not create a section for this group, but will still process the views
    "IncludeDiagram": true, // if true, will include the view's diagram
    "IncludeDocumentation": true, // if true, will include the view's documentation text (which itself can have markdown, by the way)
    "IncludeViewElements": true, // if true, will include a catalogue of the view's elements
    "IncludeProperties": false, // if true, will include the "properties" field in a catalogue of elements from a view
    "CreateSectionPerView": false, // if true, will create an individual section for each view in a group,
    "IncludeElementsWithoutDocumentation": false, // if true, will include elements without documentation in the list of elements,
    "GroupElementAsInView": false, // if true, will group element in the groups as in the view
    "FilterViewElements": [], // if set, will only include elements of the specified types in the list of elements,
    "Appendix": false, // if true, will include the group as an appendix
    //TODO: "ElementColumns": [{name: "Name", field: "name"}], // overrides the list of columns to include in the element catalogue (need to find a structure we can easily set in a property that we hopefully don't have to parse)
};

// Shallow clones attributes of a basic object
function shallowClone(obj) {
    // If the object provided is not actually an object, return null so we don't accidentally clobber some other reference
    if (null === obj || "object" !== typeof obj) {
        return null;
    }

    // Create a new, blank, object, then copy over the attributes
    var copy = {};
    for (var attr in obj) {
        copy[attr] = obj[attr];
    }
    return copy;
}

function generateLink(theString) {
    // this function thanks to Steven Mileham
    var regex = /[\[\]\(\)\#\\\/\"]/gi;
    return theString.toLowerCase().replace(regex, "")
        .replaceAll(" [ -]*", "-") // originally .replaceAll(" ", "-"), but caused issues where name had a dash, eg. "MyProject - Some Viewpoint - Domain"
        .replaceAll(" ", "_")
        .replaceAll("\<", "lt")
        .replaceAll("\>", "gt")
        .replace(/[^\u0000-\u007E]/g, function (weirdo) {
            return diacriticsMap[weirdo] || weirdo;
        });
}

function replaceNL(strIn) {
    if (null === strIn || "string" !== typeof strIn) return "";
    var lines = strIn.replaceAll("\r","").split("\n");

    for (var i = 0; i < lines.length - 1; i++) {
        // Check if the current line is empty or contains only whitespace
        if (lines[i].trim() === "" && lines[i + 1].trim() !== "") {
            //lines[i] = "+";  // Replace the empty line with a '+'
        }
    }

    return lines.join("\n");  // Join the lines back into a single string

    //var newStr = strIn.replace(/^\s*$(?=\s*\S)/gm, "+");
    //return newStr;
}

function addPropsAsItalic(thisObj) {
    // Bold keys take up even less space
    var theProperties = thisObj.prop();
    if (theProperties) {
        for (key in theProperties) {
            if ((theProperties[key] != 'label') && (theProperties[key] != "drill down")) {
                outInfo += "* *" + theProperties[key] + ":* " + thisObj.prop(theProperties[key]) + "\n";
            }
        }
    }
}

// Prints (documents) the elements and maybe properties (not relations) on the view
function printViewElements(view, level, settings) {
    var objList = [];
    $(view).find("element").each(function (viewObj) {
        objList.push(viewObj);
    });

    objList.sort(); // ensures the output groups by object type

    // Print heading
    //outputHdr(level + 1, "Katalog elementów", false);
    outInfo += "\n.Katalog elementów"
    outInfo += "\n[%autowidth.stretch,options=\"header\",cols=\"2,1,3\"]\n|===\n";

    // Define which columns should be included in the catalogue
    var columns = [];
    columns.push({
        "name": "Name",
        "field": "name"
    });
    columns.push({
        "name": "Type",
        "field": "type"
    });
    columns.push({
        "name": "Description",
        "field": "documentation"
    });
    if (settings.IncludeProperties === true) {
        columns.push({
            "name": "Properties",
            "special": "properties"
        });
    }

    // Print column headers
    var columnString = "";
    var columnBorder = "";
    for (var c = 0; c < columns.length; c++) {
        columnString += "|" + columns[c].name + " ";
    }
    outInfo += columnString += "\n";

    // For each row (element)
    var i;
    for (i in objList) {
        // Print each desired field under the table column for the row
        for (var j = 0; j < columns.length; j++) {
            // Start the cell
            outInfo += (j > 1) ? "\na|" : "|";

            // Check columns for special cases
            if (columns[j].special != null) {
                // If the special case is element properties, and we want to print properties...
                if (columns[j].special === "properties" && settings.IncludeProperties === true) {
                    addPropsAsItalic(objList[i]);
                }
            } else {
                // Default printing of a cell's data. If it's the first column though, bold it.
                outInfo += (j === 0) ? "*" : "";
                outInfo += replaceNL(objList[i][columns[j].field]);
                outInfo += (j === 0) ? "*" : "";
            }
        }

        // Complete the last cell of the row
        outInfo += "\n";
    }
    outInfo += "|===\n";
}

// Prints (documents) the elements and maybe properties (not relations) on the view
function printViewElementsAsTable(view, level, settings, columns) {
    var objList = [];
    $(view).find("element").each(function (viewObj) {

        //getAllMethods(viewObj);
        if(objList.some(i => i.getConcept().getId() == viewObj.getConcept().getId())) {
            //remove duplicates
            return;
        }
        if(settings.FilterViewElements && settings.FilterViewElements.length > 0) {
            if (settings.FilterViewElements.indexOf(viewObj.type) > -1) {
                objList.push(viewObj);
            }
        } else {
            objList.push(viewObj);
        }
    });

    objList.sort(); // ensures the output groups by object type

    printItem = function(item) {
                var docs = replaceNL(item["documentation"]);
                if(docs == "" && settings.IncludeElementsWithoutDocumentation == false) {
                   return;
                }
                docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
                .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
                .replaceAll("@endmindmap", "@endmindmap\n----")
                .replaceAll("@enduml", "@enduml\n----");

                outInfo += "\n|";
                outInfo += "*" + replaceNL(item["name"]);
                if(item["specialization"])
                    outInfo += " ("+replaceNL(item["specialization"]) +")";
                else
                    outInfo += " ("+replaceNL(item["type"]) +")";
                outInfo += "*";
                if (docs != "") {
                    outInfo += "\n\n";
                    outInfo += docs;
                    outInfo += "\n";
                }
    }
    outInfo += '[cols="'+columns+'", frame=ends]\n';
    outInfo += "|===\n";

    // For each row (element)
    for (var i in objList) {
        printItem(objList[i]);
    }
    outInfo += "|===\n";
}

function printViewElementsAsUserScenarioTable(view, level, settings) {
    var objList = [];
    console.log("User scenario table from view " + view.name);
    $(view).find("element").each(function (viewObj) {

        if(objList.some(i => i.getConcept().getId() == viewObj.getConcept().getId())) {
            //remove duplicates
            return;
        }
        if(settings.FilterViewElements && settings.FilterViewElements.length > 0) {
            if (settings.FilterViewElements.indexOf(viewObj.type) > -1) {
                objList.push(viewObj);
            }
        } else {
            objList.push(viewObj);
        }
    });

    var filteredList = objList.filter(function(item) {
        return item["type"] === 'business-process' && item.prop('user-scenario-id') != null;
    }).sort(function(a, b) {
          var useCaseIdA = a.prop('user-scenario-id');
          var useCaseIdB = b.prop('user-scenario-id');
          return natSort(useCaseIdA, useCaseIdB);
      });


    printItem = function(item) {
                var docs = replaceNL(item["documentation"]);
                if(docs == "" && settings.IncludeElementsWithoutDocumentation == false) {
                   return;
                }
                docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
                .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
                .replaceAll("@endmindmap", "@endmindmap\n----")
                .replaceAll("@enduml", "@enduml\n----");

                if (docs != "") {
                    outInfo += "\n";
                    outInfo += docs;
                    outInfo += "\n";
                }
    }

    printRow = function(name, items, fallbackValue = "") {
            outInfo += "\n|*"+name+"*\n|"
            outInfo += printItemOrList(items, fallbackValue);
    }

    // For each row (element)
    for (var i in filteredList) {

        var title = filteredList[i].prop("user-scenario-id") +" "+filteredList[i]["name"];
        outInfo += "\n[.lead]\n[["+generateLink(filteredList[i].prop("user-scenario-id"))+","+title+"]]" + title;

        outInfo += '\n[cols="1,5a", frame=none]\n';
        outInfo += "|===\n";

        printRow("Uczestnicy",
          $(filteredList[i]).inRels("assignment-relationship")
            .filter(function(rel) {
              return rel.source.type == "business-actor" || rel.source.type == "business-role";
            }).map(function(rel) {
              return rel.source.name;
            }).concat(
              $(filteredList[i]).outRels("serving-relationship")
                .filter(function(rel) {
                  return rel.target.type == "business-actor" || rel.target.type == "business-role";
                }).map(function(rel) {
                  return rel.target.name;
                })
            )
        );

        printRow("Potrzeba", $(filteredList[i]).outRels("influence-relationship")
        .filter(function(rel) {
          return rel.target.type == "value";
        }).map(function(rel) {
          return rel.target.name;
        }), filteredList[i].prop("value"));

        var docs = replaceNL(filteredList[i]["documentation"]);
        docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
        .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
        .replaceAll("@endmindmap", "@endmindmap\n----")
        .replaceAll("@enduml", "@enduml\n----");

        printRow("Scenariusz", null, docs);
        outInfo += "\n|===\n";
    }

}

function buildRequirementTree(filteredList) {
    // Map to store each requirement and its children
    var requirementMap = new Map();

    // Populate the map with the children relationships
    for (var i in filteredList) {
        var requirement = filteredList[i];
        var children = $(requirement).outRels("aggregation-relationship")
            .filter(function(rel) {
                return rel.target.type == "requirement";
            }).map(function(rel) {
                return rel.target;
            }).concat(
                $(requirement).outRels("compositions-relationship")
                    .filter(function(rel) {
                        return rel.target.type == "requirement";
                    }).map(function(rel) {
                        return rel.target;
                    })
            );

        requirementMap.set(requirement, children);
    }

    // Function to recursively build the tree
    function buildTree(node) {
        node.children = requirementMap.get(node.requirement).map(function(i) {
            return {
                requirement: i,
                children: []
            }
        } ) || [];
        requirementMap.remove(node.requirement);
        return node;
    }

    // Find root requirements (those that are not children of any other requirement)
    var rootRequirements = filteredList.filter(function(req) {
        return !Array.from(requirementMap.values()).flat().includes(req);
    });

    // Build the tree starting from the root requirements
    var tree = rootRequirements.map(function(i) {
                                           return {
                                               requirement: i,
                                               children: []
                                           }});
    return tree;
}

function printItemOrList(items, fallbackValue = "") {
    var returnValue = "";
    if(items != null && items.length > 0) {
        if(items.length == 1) {
            returnValue += items[0];
        } else if(items.length) {
              returnValue += "* " + items.join("\n* ");
        }
        return returnValue;
    }
    if (fallbackValue != null) {
        return fallbackValue;
    }
    return "";
}

function printViewElementsAsRequirementTable(view, level, settings) {
    var objList = [];
    console.log("Requirements table from view " + view.name);
    $(view).find("element").each(function (viewObj) {

        if(objList.some(i => i.getConcept().getId() == viewObj.getConcept().getId())) {
            //remove duplicates
            return;
        }
        if(settings.FilterViewElements && settings.FilterViewElements.length > 0) {
            if (settings.FilterViewElements.indexOf(viewObj.type) > -1) {
                objList.push(viewObj);
            }
        } else {
            objList.push(viewObj);
        }
    });

    var filteredList = objList.filter(function(item) {
        //console.log("Requirement: " + item.prop("req-id") + " " + item["name"]);
        return item.prop('req-id') != null;
    }).sort(function(a, b) {
          var useCaseIdA = a.prop('req-id');
          var useCaseIdB = b.prop('req-id');
          return natSort(useCaseIdA, useCaseIdB);
      });

    printItem = function(item) {
                var docs = replaceNL(item["documentation"]);
                if(docs == "" && settings.IncludeElementsWithoutDocumentation == false) {
                   return;
                }
                docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
                .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
                .replaceAll("@endmindmap", "@endmindmap\n----")
                .replaceAll("@enduml", "@enduml\n----");

                if (docs != "") {
                    outInfo += "\n";
                    outInfo += docs;
                    outInfo += "\n";
                }
    }

    findRelatedFunctionsOrServices = function(requirement) {
        var relatedFunctions = $(requirement).inRels("realization-relationship")
            .filter(function(rel) {
                return rel.source.type == "application-function";
            }).map(function(rel) {
                return rel.source.name;
            });
        var relatedServices = $(requirement).inRels("realization-relationship")
            .filter(function(rel) {
                return rel.source.type == "application-service";
            }).map(function(rel) {
                return rel.source.name;
            });
        return printItemOrList(relatedFunctions.concat(relatedServices))
    }


    printRow = function(name, items, fallbackValue = "") {
            outInfo += "\n|*"+name+"*\n|"
            outInfo += printItemOrList(items, fallbackValue);
    }

    outInfo += '\n[cols="1,2,2a,4,1,2", frame=none]\n';
    outInfo += "|===\n";
    outInfo += "|Id |Nazwa | Dotyczy | Opis |Priorytet |Zależności\n";

    tree = buildRequirementTree(filteredList);
    for (var i in tree) {
        var title = tree[i].requirement.prop("req-id") +" "+tree[i].requirement["name"];
        outInfo += "\n|[["+generateLink(tree[i].requirement.prop("req-id"))+","+title+"]]"+tree[i].requirement.prop("req-id") +"\n| "+tree[i].requirement["name"]+"\n|"+findRelatedFunctionsOrServices(tree[i].requirement)+"\n| "+replaceNL(tree[i].requirement["documentation"])+"\n| "+replaceNL(tree[i].requirement.prop("priority"))+"\n| ";
        tree[i].children.forEach(function(child) {
            var title = child.requirement.prop("req-id") +" "+child.requirement["name"];
            outInfo += "\n^|[["+generateLink(child.requirement.prop("req-id"))+","+title+"]]"+child.requirement.prop("req-id") +" | "+child.requirement["name"]+" |"+findRelatedFunctionsOrServices(child.requirement)+" | "+replaceNL(child.requirement["documentation"])+" | "+replaceNL(child.requirement.prop("priority"))+" | ";
            child.children.forEach(function(child) {
                        var title = child.requirement.prop("req-id") +" "+child.requirement["name"];
                        outInfo += "\n>|[["+generateLink(child.requirement.prop("req-id"))+","+title+"]]"+child.requirement.prop("req-id") +" | "+child.requirement["name"]+" |"+findRelatedFunctionsOrServices(child.requirement)+" | "+replaceNL(child.requirement["documentation"])+" | "+replaceNL(child.requirement.prop("priority"))+" | ";
                    });
        });
    }
    outInfo += "\n|===\n";
}

function printViewElementsAsUseCaseTable(view, level, settings) {
    var objList = [];
    console.log("Use Case Table");
    $(view).find("element").each(function (viewObj) {

        //getAllMethods(viewObj);
        if(objList.some(i => i.getConcept().getId() == viewObj.getConcept().getId())) {
            //remove duplicates
            return;
        }
        if(settings.FilterViewElements && settings.FilterViewElements.length > 0) {
            if (settings.FilterViewElements.indexOf(viewObj.type) > -1) {
                objList.push(viewObj);
            }
        } else {
            objList.push(viewObj);
        }
    });

    var filteredList = objList.filter(function(item) {
        return (item["type"] === 'application-service' || item["type"] === 'business-service') && item.prop('use-case-id') != null; ;
    }).sort(function(a, b) {
          var useCaseIdA = a.prop('use-case-id');
          var useCaseIdB = b.prop('use-case-id');
          return natSort(useCaseIdA, useCaseIdB);
      });


    printItem = function(item) {
                var docs = replaceNL(item["documentation"]);
                if(docs == "" && settings.IncludeElementsWithoutDocumentation == false) {
                   return;
                }
                docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
                .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
                .replaceAll("@endmindmap", "@endmindmap\n----")
                .replaceAll("@enduml", "@enduml\n----");

                if (docs != "") {
                    outInfo += "\n";
                    outInfo += docs;
                    outInfo += "\n";
                }
    }

    printRow = function(name, items, fallbackValue = "") {
            outInfo += "\n|*"+name+"*\n|"
            outInfo += printItemOrList(items, fallbackValue);
    }

    if(view.prop("_doc_render_plantuml") == "true") {
        var umldiagram = '\n[plantuml, format="svg", options="interactive"]'+"\n----\n!include <archimate/Archimate>\n";
        umldiagram += "left to right direction\n";
        var actorList = [];
        for (var i in filteredList) {
            var linkValue = generateLink(filteredList[i].prop("use-case-id"))

            //umldiagram += 'usecase '+ linkValue +' #application as "[[xref:'+linkValue+" "+filteredList[i].prop("use-case-id")+"]]\n"+filteredList[i]["name"]+'"\n';
            umldiagram += 'usecase '+ linkValue +' #application as "'+filteredList[i].prop("use-case-id")+"\n"+filteredList[i]["name"]+'"\n';

            $(filteredList[i]).outRels("serving-relationship")
                    .filter(function(rel) {
                      return rel.target.type == "business-actor" || rel.target.type == "business-role";
                    }).forEach(function(rel) {
                        if(!actorList.includes(rel.target)) {
                            actorList.push(rel.target);
                            umldiagram += 'Business_Actor('+generateLink(rel.target.name)+', '+rel.target.name+')\n';
                            //umldiagram += 'actor "'+rel.target.name+'" as '+generateLink(rel.target.name)+'\n';
                        }
                        umldiagram += generateLink(rel.target.name) + ' --> ' + linkValue + '\n';
                    });
        }
        umldiagram  += '----\n';
        outInfo += umldiagram;
    }

    // For each row (element)
    for (var i in filteredList) {

        var title = filteredList[i].prop("use-case-id") +" "+filteredList[i]["name"];
        outInfo += "\n[.lead]\n[["+generateLink(filteredList[i].prop("use-case-id"))+","+title+"]]" + title;
        outInfo += '\n[cols="1,5a", frame=none]\n';
        outInfo += "|===\n";

        printRow("Wartość", $(filteredList[i]).outRels("influence-relationship")
        .filter(function(rel) {
          return rel.target.type == "value";
        }).map(function(rel) {
          return rel.target.name;
        }), filteredList[i].prop("value"));

        printRow("Uczestnicy", $(filteredList[i]).outRels("serving-relationship")
        .filter(function(rel) {
          return rel.target.type == "business-actor" || rel.target.type == "business-role";
        }).map(function(rel) {
          return rel.target.name;
        }));

        printRow("Wyzwalacz", $(filteredList[i]).outRels("triggering-relationship")
        .filter(function(rel) {
          return rel.source.type.indexOf("event") > -1;
        }).map(function(rel) {
          return rel.source.name;
        }), filteredList[i].prop("trigger"));

        printRow("Warunki początkowe", $(filteredList[i]).outRels("access-relationship")
        .filter(function(rel) {
          return rel.target.type.indexOf("object") > -1 && rel.getConcept().getAccessType()=="read";
        }).map(function(rel) {
          return rel.target.name;
        }), filteredList[i].prop("preconditions"));

        printRow("Warunki końcowe", $(filteredList[i]).outRels("access-relationship")
        .filter(function(rel) {
          return rel.target.type.indexOf("object") > -1 && rel.getConcept().getAccessType()=="write";
        }).map(function(rel) {
          return rel.target.name;
        }), filteredList[i].prop("postconditions"));

        printRow("Wymagania", $(filteredList[i]).outRels("realization-relationship")
        .filter(function(rel) {
          return rel.target.type == "requirement" || rel.target.type == "constraint";
        }).map(function(rel) {
          return rel.target.name;
        }), filteredList[i].prop("requirements"));

        outInfo += "\n|===\n";

        printItem(filteredList[i]);
    }

}


// Prints (documents) the elements and maybe properties (not relations) on the view
function printViewElementsAsList(view, level, settings) {
    var objList = [];
    $(view).find("element").each(function (viewObj) {

        //getAllMethods(viewObj);
        if (objList.some(i => i.getConcept().getId() == viewObj.getConcept().getId())) {
            //remove duplicates
            return;
        }
        if (settings.FilterViewElements && settings.FilterViewElements.length > 0) {
            if (settings.FilterViewElements.indexOf(viewObj.type) > -1) {
                objList.push(viewObj);
            }
        } else {
            objList.push(viewObj);
        }
    });

    objList.sort(); // ensures the output groups by object type

    printItem = function(item, level) {
                var docs = replaceNL(item["documentation"]);
                if(docs == "" && settings.IncludeElementsWithoutDocumentation == false) {
                   return;
                }
                docs = docs.replaceAll("@startmindmap", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startmindmap')
                .replaceAll("@startuml", '[plantuml, format="svg", opts="inline", align="left"]\n----\n@startuml')
                .replaceAll("@endmindmap", "@endmindmap\n----")
                .replaceAll("@enduml", "@enduml\n----");

                outInfo += "\n "+level +" ";
                outInfo += replaceNL(item["name"]);
                if(item["specialization"])
                    outInfo += " ("+replaceNL(item["specialization"]) +")";
                else
                    outInfo += " ("+replaceNL(item["type"]) +")";
                if (docs != "") {
                    outInfo += "\n+\n--\n";
                    outInfo += docs;
                    outInfo += "\n--\n+";
                }
    }

//    if(settings.GroupElementAsInView) {
//        groups = objList.filter(function(item, index) {
//                        return item.type === "grouping";
//                    });
//
//
//        for (var i in groups) {
//           printItem(groups[i], "*");
//
//           groups[i].children().forEach(function(element) {
//               printItem(element, "**");
//           });
//        }
//
//
//    }

    // For each row (element)
    for (var i in objList) {
        printItem(objList[i], "*");
    }
    outInfo += "\n//-\n";
}



function getViews(Level, Levelobj, settings) {
    var thisPath = "";
    var imageURL = "";
    var viewList = [];

    if (!Levelobj) {
        return null;
    } else {
        // Find the view references composed within this group and put them into an array so we can sort them.
        $(Levelobj).children().each(function (viewRefs) {
            if ((viewRefs) && ((viewRefs.type == 'archimate-diagram-model') || (viewRefs.type == 'sketch-model'))) {

                // Find the actual linked views
                var viewsCollection = $('archimate-diagram-model');
                viewsCollection.add($('sketch-model'));
                viewsCollection.each(function (linkedView) {

                    // this doesn't cater for duplicate view names, sorry
                    if (linkedView.name === viewRefs.name) {
                        viewList.push([viewRefs, linkedView]);
                    }
                });

            }
        });

        // sort viewList by x then y bounds. Effectively allows views to go top left to bottom right in order.
        // this is complicated by the need to refer to the viewRefs part of the pair.
        viewList.sort(function (left, right) {
            return left[0].bounds.x - right[0].bounds.x;
        });

        viewList.sort(function (top, bottom) {
            return top[0].bounds.y - bottom[0].bounds.y;
        });

        // now go through the sorted viewList
        for (var k = 0; k < viewList.length; k++) {

            var myView = viewList[k][0];
            var myRef = viewList[k][1];

            if (settings["CreateSectionPerView"] === true) {
                outputHdr(Level + 1, myView.name, true);
            }

            // Include the view's diagram (if desired)
            if (settings.IncludeDiagram === true && myView.prop('IncludeDiagram') !== 'false') {

                var maxWidth = 0;
                var minWidth = 0;
                $(myRef).children().forEach(function(element) {
                    var bounds = element.bounds
                    if(bounds) {
                       var rightEdge = bounds.x + bounds.width;
                        if (rightEdge > maxWidth) {
                            maxWidth = rightEdge;
                        }
                        if (bounds.x < minWidth) {
                           minWidth  = bounds.x;
                        }
                        //console.log("Element: " + element.name + " - Width: " + rightEdge)
                    }
                });

                //console.log("View: " + myRef + " - Width: " + (maxWidth-minWidth))
                var pageWidth = 1000;
                var widthPercentage = myRef.prop("pdfwidth") ? myRef.prop("pdfwidth") : ((maxWidth-minWidth) / pageWidth) * 100;

                imageName = "images/" + generateLink(myView.name);
                if(exportAsSVG) {
                    var svgString = $.model.renderViewAsSVGString(myRef, true);
                    imageName = imageName + ".svg";
                    $.fs.writeFile(path + imageName, svgString);
                } else {
                    var bytes = $.model.renderViewAsBase64(myRef, "PNG", {
                        scale: 1,
                        margin: 10
                    });
                    imageName = imageName + ".png";
                    $.fs.writeFile(path + imageName, bytes, "BASE64");
                }

//                if (embed) {
//                    outInfo += "\n![" + myView.name + "](data:image/png;base64," + bytes + ")\n";
//                } else {

                    //imageURL = thisPath.replaceAll(" ", "%20");
                    //outInfo += "\n![Diagram: " + myView.name + "][" + myView.name + "]\n";
                    //outInfo += "\n[" + myView.name + "]: " + imageURL + ".png\n";
                    var caption = myView.prop("caption") ? myView.prop("caption") : myView.name;
                    if(caption) {
                        caption = "\n\n." + caption;
                    }
                    if(widthPercentage > 160) {
                        outInfo += "\n[.landscape]\n<<<"
                        outInfo += caption
                        outInfo += "\nimage::" + imageName + "[pdfwidth=100%]\n"
                        outInfo += "\n[.portrait]\n<<<\n"
                    } else {
                        // Cap the percentage at 100%
                        if (widthPercentage > 120) {
                            widthPercentage = 120;
                        }
                        outInfo += caption
                        outInfo += "\nimage::" + imageName + "[pdfwidth=" + Math.ceil(widthPercentage) + "%]\n"
                    }
               // }
            }
            if (settings.IncludeDocumentation === true) {
                myView.documentation != "" ? outInfo += "\n" + myView.documentation + "\n" : true;
            }

            // Now document the view details (if desired)
            if (myView.prop("IncludeViewElements") == 'true' || myView.prop("IncludeViewElements") != 'false' && settings.IncludeViewElements === true) {

                if(myView.prop("_doc_render") == 'req-table') {
                    printViewElementsAsRequirementTable(myRef, viewList.length > 1 ? Level + 1 : Level, settings)
                } else if (myView.prop("_doc_render") == 'use-scenario-table') {
                   printViewElementsAsUserScenarioTable(myRef, viewList.length > 1 ? Level + 1 : Level, settings)
                } else if (myView.prop("_doc_render") == 'use-case-table') {
                   printViewElementsAsUseCaseTable(myRef, viewList.length > 1 ? Level + 1 : Level, settings)
                } else if (myView.prop("_doc_columns") != null) {
                   printViewElementsAsTable(myRef, viewList.length > 1 ? Level + 1 : Level, settings, myView.prop("_doc_columns"));
                } else {
                   printViewElementsAsList(myRef, viewList.length > 1 ? Level + 1 : Level, settings);
                }
            }

        }
    }
}

function addSpace(numSpaces) {
    var i;
    var rtnText = " ";
    for (i = 0; i < numSpaces; i++) {
        rtnText += "   ";
    }
    return rtnText;
}

function outputHdr(Level, Name, AddLink, Doc, settings = {}) {

    var indent = "";
    var tocIndent = "";

    if(settings && !settings.FlatThisGroup) {
        for (var i = 0; i < Level; i++) {
            indent = indent + "=";
        }
        for (var j = 0; j < Level - 1; j++) { // ToC needs one less indent tab.
            tocIndent = tocIndent + "\t";
        }

        if (Name != "Katalog elementów") {
            console.log(addSpace(Level - 1), Name);
        }

        var outHdr = "\n" + indent + " " + Name+ "\n";

        // put a fudge post processing to insert 'NEWPAGE' in for header levels listed in listofNewpageheaders
        if (hardNewpage) {
            if (listofNewpageheaders.indexOf(Level) != -1) {
                outInfo += '\nNEWPAGE\n';
            }
        }

        if( settings.Appendix ) {
            outInfo += "\n[appendix]";
        }
        // Add a link to table of contents (TOC), if requested
        if (AddLink) {
            var thisLink = generateLink(Name);
            outInfo += "\n" + "[#" + thisLink + ", reftext = \""+ Name +"\"]";
        }
        outInfo += outHdr;

    }
    if (Doc) {
        outInfo += "\n" + Doc+ "\n";
    }

}

// Generate a link from a provided string
// Adds _ until the file name is unique (doesn't exist in the existingFiles array)
function generateUniqueFileName(fileName, existingFiles) {
    let uniqueFileName = fileName;
    while (existingFiles.includes(uniqueFileName)) {
        uniqueFileName = "_" + uniqueFileName;
    }
    return uniqueFileName;
}

// Finds the group's sub-group, if any
// Returns true if no errors were encountered
function getSubGroups(group, nextLevel, parentInclusionSettings) {
    var outcome = true;

    $(group).outRels("composition-relationship").each(function (subGroup) {

        var incomingRels2 = $(subGroup.target).inRels("triggering-relationship").size();

        // If it's the first child in the sub group
        if (incomingRels2 == 0) {
            // add the sub group onto the array
            outcome = outcome && addGroup(subGroup.target, nextLevel, parentInclusionSettings);
        } else {
            // just ignore the rest, getSubGroups / getNextGroup will take care of them.
        }
    });

    return outcome;
}

// Finds the next sibling group in the series
// Returns true if no errors were encountered
function getNextGroup(group, level, parentInclusionSettings) {
    var nextGroup = null;
    var outgoingRels = $(group).outRels("triggering-relationship").size();

    if (outgoingRels == 1) {
        // There's a triggering out so find the next..
        nextGroup = $(group).outRels("triggering-relationship").first();
        if (nextGroup) {
            // add the next one onto the array
            return addGroup(nextGroup.target, level, parentInclusionSettings);
        } else {
            window.alert("The groups should all use triggering relationships");
            return false;
        }
    } else if (outgoingRels > 1) {
        window.alert("The groups should have only one outgoing and incoming triggering relationship");
    }

    return true;
}

// Adds a group to the list of sections to output in the document, and orchestrates a recursive grab of the next sub group & sibling group (if existing)
// Returns true if no errors were encountered
function addGroup(group, level, parentInclusionSettings) {

    // Get this group's updated inclusion settings
    var settings = getGroupInclusionSettings(group, parentInclusionSettings);
    if (settings === null) {
        Errors.push({
            message: "Group is missing settings",
            object: group
        });
        return false;
    }

    // Add the group to the list of sections
    Sections.push({
        "group": group,
        "level": level,
        "settings": settings
    });

    // Look for more sub groups under this one
    getSubGroups(group, level + 1, settings)

    // Look for sibling groups
    getNextGroup(group, level, parentInclusionSettings)

    return true;
}

function useDrivingView() {
    drivingView = selection.filter("archimate-diagram-model").first();
    if (!drivingView) {
        window.alert("Please open and select a Driving View for the documentation");
    } else {
        console.log("Driving view is: " + drivingView.name);
        var inclusionSettings = getGroupInclusionSettings(drivingView, DefaultInclusionSettings);
        console.log("Default IncludeDiagram setting: " + inclusionSettings["IncludeDiagram"]);
        console.log("Default IncludeDocumentation setting: " + inclusionSettings["IncludeDocumentation"]);
        console.log("Default IncludeViewElements setting: " + inclusionSettings["IncludeViewElements"]);
        console.log("Default IncludeProperties setting: " + inclusionSettings["IncludeProperties"]);

        // Go through each immediate child group in the view, find the first group(s) in a series
        var outcome = true;
        $(drivingView).children("grouping").each(function (thisGroup) {
            if (thisGroup) {
                var incomingRels = $(thisGroup).inRels("triggering-relationship").size();

                if (incomingRels == 0) {
                    // It's a top-level section, put it in the array.
                    outcome = outcome && addGroup(thisGroup, 1, inclusionSettings);
                } else {
                    // Ignore if if there's an incoming triggering relationship ... our recursive getNextGroup function will find it.
                }
            }
        });

        if (!outcome) {
            window.alert("Error when extracting a group");
            console.log("Error stack:");
            for (var i = 0; i < Errors.length; i++) {
                console.log("- " + Errors[i].message);
                if (Verbose) {
                    console.log(" " + Errors[i].object);
                }
            }
        }

    }
    return (true);

} // end of useDrivingView

// Get the settings for what to include in this branch of a document hierarchy
// settingsElement: reference to the driving view or a group which may have overriding settings
// defaultSettings: settings object to use as default (required)
function getGroupInclusionSettings(settingsElement, defaultSettings) {
    // Check default settings
    if (defaultSettings === null ||
        typeof defaultSettings !== "object" ||
        defaultSettings["IncludeDiagram"] === null ||
        defaultSettings["IncludeDocumentation"] === null ||
        defaultSettings["IncludeViewElements"] === null ||
        defaultSettings["IncludeProperties"] === null
    ) {
        window.alert("Default settings were not correctly passed to a child node");
        return (null);
    }
    var settings = shallowClone(defaultSettings);

    // Check for overrides
    var checkIncludeDiagram = settingsElement.prop("IncludeDiagram");
    var checkIncludeDocumentation = settingsElement.prop("IncludeDocumentation");
    var checkIncludeElements = settingsElement.prop("IncludeViewElements");
    var checkIncludeProperties = settingsElement.prop("IncludeProperties");
    var checkCreateChildAdoc = settingsElement.prop("CreateChildAdoc");
    var checkAddParentSectionNumberToChild = settingsElement.prop("AddParentSectionNumberToChild");
    var createSectionPerView = settingsElement.prop("CreateSectionPerView");
    var filterViewElements = settingsElement.prop("FilterViewElements");
    var flatThisGroup = settingsElement.prop("FlatThisGroup");
    var checkIncludeElementsWithoutDocumentation = settingsElement.prop("IncludeElementsWithoutDocumentation");
    var checkGroupElementAsInView = settingsElement.prop("GroupElementAsInView");
    var checkAppendix = settingsElement.prop("Appendix");
    var checkOverwrite = settingsElement.prop("Overwrite");

    if (checkIncludeDiagram !== null) {
        settings["IncludeDiagram"] = checkIncludeDiagram === "true" ? true : false;
    }

    if (checkIncludeElementsWithoutDocumentation !== null) {
        settings["IncludeElementsWithoutDocumentation"] = checkIncludeElementsWithoutDocumentation === "true" ? true : false;
    }

    if (checkAppendix !== null) {
        settings["Appendix"] = checkAppendix === "true" ? true : false;
    }

        if (checkGroupElementAsInView !== null) {
            settings["GroupElementAsInView"] = checkGroupElementAsInView === "true" ? true : false;
        }

    if (createSectionPerView !== null) {
        settings["CreateSectionPerView"] = createSectionPerView === "true" ? true : false;
    }

    if (filterViewElements !== null) {
        settings["FilterViewElements"] = filterViewElements.replaceAll(" ","").split(",");
    }

    if (flatThisGroup !== null) {
        settings["FlatThisGroup"] = flatThisGroup === "true" ? true : false;
    } else {
        settings["FlatThisGroup"] = false;
    }

    if(settings["FlatThisGroup"] === true) {
        settings["CreateChildAdoc"] = false;
    }

    if (checkCreateChildAdoc !== null) {
        settings["CreateChildAdoc"] = checkCreateChildAdoc === "true" ? true : false;
    }

    if (checkAddParentSectionNumberToChild !== null) {
        settings["AddParentSectionNumberToChild"] = checkAddParentSectionNumberToChild === "true" ? true : false;
    }

    if (checkOverwrite !== null) {
        settings["Overwrite"] = checkOverwrite === "true" ? true : false;
    }

    if (checkIncludeDocumentation !== null) {
        settings["IncludeDocumentation"] = checkIncludeDocumentation === "true" ? true : false;
    }

    if (checkIncludeElements !== null) {
        settings["IncludeViewElements"] = checkIncludeElements === "true" ? true : false;
    }

    if (checkIncludeProperties !== null) {
        settings["IncludeProperties"] = checkIncludeProperties === "true" ? true : false;
    }


    return settings;
}

// Main Code

if (useDrivingView()) {
    var docGen = "";
    var exportFile = window.promptSaveFile({
        title: "Export to File",
        filterExtensions: ["*.adoc"],
        fileName: drivingView.name + ".adoc"
    });

    // where's the path. Find where the last slash delimiter is
    var lastSlash = "";
    if (exportFile) {
        if (exportFile.indexOf("/") == -1) {
            lastSlash = exportFile.lastIndexOf("\\"); // Windows
        } else {
            lastSlash = exportFile.lastIndexOf("/"); // Mac or Linux
        }
        path = exportFile.substring(0, lastSlash + 1);
        mainFileName = exportFile.substring(lastSlash + 1, exportFile.length);
        console.log("path: ", exportFile.substring(0, lastSlash + 1));


        console.log("fileName: ", exportFile.substring(lastSlash + 1, exportFile.length));

        // go through the array, and output.

        function saveToFile(filePath, content, overwrite) {
            var File = Java.type("java.io.File");
            if(overwrite || !new File(filePath).exists()) {
                $.fs.writeFile(filePath, content);
                console.log("Saved to:", filePath);
            } else {
                console.log("File exists:", filePath);
            }
        }

        function getFilePath(basePath, name) {
            return basePath + name + ".adoc";
        }

        var overwriteDrivingView = drivingView.prop("Overwrite") == null || drivingView.prop("Overwrite") == "true"

        var childDocs = [];
        var createdFileNames = [];
        childDocs.push({
                    level: 0,
                    childPrefix: "_",
                    childCount: 0,
                    fileName: mainFileName,
                    filePath: exportFile,
                    content: (overwriteDrivingView ? "//WARNING! This file has been auto-generated. Do NOT edit it. Everything will be overwritten\n\n" : "") + drivingView.documentation + "\n\n",
                    overwrite: overwriteDrivingView,
                    flatThisGroup: false
                });
        for (var i = 0; i < Sections.length; i++) {

            while (childDocs.length > 0 && Sections[i].level <= childDocs[childDocs.length - 1].level) {
                var finishedChild = childDocs.pop();
                saveToFile(finishedChild.filePath, finishedChild.content, finishedChild.overwrite);


                // Continue appending to the parent document if popped
                if (childDocs.length > 0) {
                    var parentDoc = childDocs[childDocs.length - 1];
                    if(finishedChild.flatThisGroup) {
                        parentDoc.content += "\ninclude::" + finishedChild.fileName + "[]\n";
                    } else {
                        parentDoc.content += "\ninclude::" + finishedChild.fileName + "[leveloffset=+"+(finishedChild.level - parentDoc.level)+"]";
                    }
                }
            }

            if (Sections[i].settings["CreateChildAdoc"]) {
                let parentDoc = childDocs[childDocs.length - 1];
                parentDoc.childCount = parentDoc.childCount + 1;
                var prefix = parentDoc.childPrefix;
                if(Sections[i].settings["AddParentSectionNumberToChild"]) {
                    var prefix = prefix +parentDoc.childCount+"_"
                }
                let fileName = generateUniqueFileName(prefix + generateLink(Sections[i].group.name) + ".adoc", createdFileNames);
                createdFileNames.push(fileName);
                childDocs.push({
                    childPrefix: prefix,
                    childCount: 0,
                    level: Sections[i].level,
                    fileName: fileName,
                    filePath: path + fileName,
                    content: Sections[i].settings["Overwrite"] == false ? "//This file is set to be not overwritten on regeneration." : "//WARNING! This file has been auto-generated. Do NOT edit it. Everything will be overwritten.\n\n",
                    overwrite: Sections[i].settings["Overwrite"],
                    flatThisGroup: Sections[i].settings["FlatThisGroup"] == true
                });
            }
            outInfo  = "";
            outputHdr(Sections[i].level-childDocs[childDocs.length - 1].level + 1, Sections[i].group.name, true, Sections[i].group.documentation, Sections[i].settings);
            getViews(Sections[i].level-childDocs[childDocs.length - 1].level + 1, Sections[i].group, Sections[i].settings);
            childDocs[childDocs.length - 1].content += outInfo;
        }
       while (childDocs.length > 0) {
            var remainingChild = childDocs.pop();
            saveToFile(remainingChild.filePath, remainingChild.content, remainingChild.overwrite);

            if (childDocs.length > 0) {
                if (remainingChild.flatThisGroup) {
                    childDocs[childDocs.length - 1].content += "\ninclude::" + remainingChild.fileName + "[]\n";
                } else {
                    childDocs[childDocs.length - 1].content += "\ninclude::" + remainingChild.fileName + "[leveloffset=+"+(remainingChild.level-childDocs[childDocs.length - 1].level)+"]";
                }
            }
        }
    }
}

// end of script
console.log("Done");


function getAllMethods(obj) {
    let methods = [];

	console.log(JSON.stringify(Object.getOwnPropertyNames(obj)))
        console.log(JSON.stringify(Object.getPrototypeOf(obj)));
}